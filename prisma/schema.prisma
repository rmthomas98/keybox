// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PaymentStatus {
  PAID
  FAILED
}

enum Status {
  SUBSCRIPTION_ACTIVE
  SUBSCRIPTION_CANCELED
  TRIAL_IN_PROGRESS
  NEW_ACCOUNT
}

model User {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  stripeId      String?
  email         String         @unique
  emailToken    String?
  emailVerified Boolean        @default(false)
  changeEmailTo String?
  twoFactor     Boolean        @default(false)
  ask2FA        Boolean        @default(true)
  phone         String?        @unique
  phoneToken    String?
  setPhoneTo    String?
  name          String?
  password      String
  paymentStatus PaymentStatus  @default(PAID)
  status        Status         @default(NEW_ACCOUNT)
  trialUsed     Boolean        @default(false)
  credentials   Credential[]
  cards         Card[]
  banks         Bank[]
  folders       Folder[]
  files         File[]
  cryptoWallets CryptoWallet[]
}

model Credential {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String?
  account   String?
  password  String?
  website   String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

enum CardType {
  CREDIT
  DEBIT
  PREPAID
  OTHER
}

enum CardBrand {
  VISA
  MASTERCARD
  AMEX
  DISCOVER
  OTHER
}

model Card {
  id         String     @id @default(cuid())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  identifier String?
  type       CardType?
  brand      CardBrand?
  name       String?
  number     String?
  exp        String?
  cvc        String?
  zip        String?
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
}

enum BankType {
  CHECKING
  SAVINGS
  OTHER
}

enum BankOwnership {
  INDIVIDUAL
  BUSINESS
  JOINT
  OTHER
}

model Bank {
  id         String         @id @default(cuid())
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  identifier String?
  type       BankType?
  ownership  BankOwnership?
  name       String?
  account    String?
  routing    String?
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
}

model Folder {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  files     File[]
  size      Int? // total size of all files in folder
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
}

model File {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String?
  type      String?
  size      Int?
  key       String?
  folder    Folder?  @relation(fields: [folderId], references: [id])
  folderId  String?
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
}

model CryptoWallet {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  name       String?
  address    String?
  privateKey String?
  phrase     String?  @db.Text
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?
}
